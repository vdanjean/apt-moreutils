#!/usr/bin/python
"""Check the origin of all packages"""

import sys
import argparse
import apt_pkg
import os
import re
import types
import xdg.BaseDirectory
import shutil
import itertools
from functools import cmp_to_key

parser = argparse.ArgumentParser(description='Display origin of installed packages')
parser.add_argument('-V', '--version', action='version', version='%(prog)s 2.2')
parser.add_argument('-v', '--verbose', action='count',      default=0,
    help='Increase verbosity')
parser.add_argument('-q', '--quiet',   action='count',      default=0,
    help='Decrease verbosity')
parser.add_argument('-l', '--list',    action='store_true', default=False,
    help='Just list available distributions')
parser.add_argument('-c', '--count',   action='store_true', default=False,
    help='Just display package count by origin')
parser.add_argument('-m', '--manual',  action='store_true', default=False,
    help='Only display manually installed packages')
parser.add_argument('-t', '--tabular', action='store_true', default=False,
    help='Use tabular output format for origin display')
parser.add_argument('-C', '--columns', nargs=1, type=int,   default=80,
    help='Set the number of columns of the output')
parser.add_argument('-L', '--lines',   nargs=1, type=int,   default=100,
    help='Set the maximal number of packages that can be displayed by origin')
parser.add_argument('-o', '--order',   action='append',
    help='Set the order in which packages are in the distributions.\n    This is a space-jointed string of stanzas like\n    alias1~site1/archive1/o=origin1/l=label1/a=arch1 where alias1 is the display name of\n    a distribution of name archive1 at site1, label1 and origin1 being the\n    values in the Release file. "none" will purge the preceding sources. Giving\n    only the alias will reselect the defined alias if none was given.\n    Regexp stanza for package names can be used instead of a mirror.\n    Simply use REName:pkgname.*$ for any package named beginning by pkgname).')

args = parser.parse_args()

loglevel=1+args.verbose-args.quiet

def log(s, level=1):
    if level <= loglevel:
        print s

def debug(s, level=2):
    log("D: "+s, level)

def fix_config_file_location():
    base_path=xdg.BaseDirectory.load_first_config('apt-origins')
    if base_path == None:
        try:
            home=os.getenv('HOME',default='.')
            orig=os.path.join(home, '.apt-origins')
            if not os.path.isfile(orig):
                return
            savedir=xdg.BaseDirectory.save_config_path('apt-origins')
            new=os.path.join(savedir, 'stanzas.list')
            log("Old configuration file detected without new one. Moving the old one to the new location")
            log("Old configuration file location: %s" % orig)
            log("New configuration file location: %s" % new)
            shutil.move(orig, new)
        except IOError:
            True

class Sources:
    PKG_UNKNOWN          = -1
    PKG_AUTOUPGRADABLE   = -2
    PKG_UPGRADABLE       = -3
    PKG_AUTODOWNGRADABLE = -4
    PKG_DOWNGRADABLE     = -5

    def __init__(self):
        # Array of sources/names
        self.sources=[]
        self.names=[]
        
        self.originalpattern={}
        self.nb_sources=0
        self.spatterns={}
        self.count={}
        self.packages={}
        self.REsrcs=[]
        self.findarchpat=re.compile("((.*)/a=)([a-z0-9]+)$")
        self.spatternsnoarch={}

    def register(self, v, forceRegister=False):
        xx=v.find('~')
        if xx!=-1:
            a=v[0:xx]
            c=v[xx+1:]
        else:
            c=v
            a=v
        if c in self.spatterns:
            if forceRegister:
                debug("Registering already existing source %s~%s" % (a, c))
            else:
                debug("Skipping %s~%s (pattern already registered)" % (a, c))
                return #self.spatterns[c]
        elif c in self.spatternsnoarch:
            return #self.spatternsnoarch[c]
        else:
            havearch=self.findarchpat.match(c)
            if havearch:
                c2=havearch.group(1)
                if c2 in self.spatterns:
                    debug("forgetting arch %s~%s (pattern without arch registered)" % (a, c))
                    self.spatternsnoarch[c]=self.spatterns[c2]
                    return #self.spatterns[c2]
        idsrc=self.nb_sources
        debug("register sources[%i]=%s, names[%i]=%s" % (idsrc, c, idsrc, a), level=3)
        self.spatterns[c]=idsrc
        xx=c.find('REName:')
        if xx==0:
            originalpatternstring=c
            c=re.compile(c[xx+7:])
            self.originalpattern[idsrc]=originalpatternstring
            self.REsrcs.append(idsrc)
        self.sources.append(c)
        self.names.append(a)
        self.nb_sources += 1
        return idsrc

    heuristic=re.compile(r"(.(org|net|com)$)|(^www.)|(^ftp.[a-z]{2,3}.)|(^ftp.)")
    def registerFromFileList(self, file_list, forceRegister=False):
        idsource=None
        for pfile,_ in file_list:
            if pfile.index_type == "Debian Package Index":
                # we register the first found if there are any
                cpt=pfile.site+'/'+pfile.archive+'/o='+pfile.origin+'/l='+pfile.label+'/a='+pfile.architecture
                alias_heuristic=re.sub(Sources.heuristic,'',pfile.site)+'.'+pfile.archive;
                name=alias_heuristic+":"+pfile.site
                if pfile.architecture:
                    name+=" ["+pfile.architecture+"]"
                idsource=self.register(name+'~'+cpt, forceRegister=forceRegister)
                break
        return idsource

    def registerInstalled(self, depcache):
        nb_sources=self.nb_sources
        for (specialsid,name, up, auto) in [
            (Sources.PKG_AUTOUPGRADABLE, 'installed/auto upgradable', True, True),
            (Sources.PKG_AUTODOWNGRADABLE, 'installed/auto downgradable', False, True),
            (Sources.PKG_UPGRADABLE, 'installed/manually upgradable', True, False),
            (Sources.PKG_DOWNGRADABLE, 'installed/manually downgradable', False, False) ]:
            curStanzaList={}
            sid=self.nb_sources
            for oldsid in range(nb_sources):
                if oldsid in self.originalpattern:
                    continue
                sid=self.register(name + " to " + self.name(oldsid) + "~"+ self.sources[oldsid], forceRegister=1)
                curStanzaList[self.sources[oldsid]]=sid
            for pkg in itertools.chain.from_iterable([ grppkg['listpkg'] for grppkg in self.pkgs(specialsid).values() ]):
                cur_ver = pkg.current_ver
                version = None
                if auto:
                    version = depcache.get_candidate_ver(pkg)
                else:
                    if up:
                        if version is None or version <= cur_ver:
                            version = min ( [ v for v in pkg.version_list if v.downloadable and cur_ver < v ] )
                    else:
                        if version is None or version >= cur_ver:
                            version = max ( [ v for v in pkg.version_list if v.downloadable and cur_ver > v ] )
                sid = self.getSidFromFileList(version.file_list, stanzaList=curStanzaList)
                if sid is None:
                    sid = self.registerFromFileList(version.file_list, forceRegister=True)
                    self.names[sid] = name + " (to " + self.name(sid) + ")"
                    curStanzaList[self.sources[sid]]=sid
                self.addPkg(sid, pkg)
                
        for (sid,name) in [
            (Sources.PKG_UNKNOWN, 'installed/unknown') ]:
            if len(self.pkgs(sid)) > 0:
                self.names.append(name)
                idsrc=self.nb_sources
                self.nb_sources += 1
                self.packages[idsrc]=self.packages[sid]

    def __len__(self):
        return self.nb_sources

    def name(self, idsrc):
        return self.names[idsrc]

    def pattern(self, idsrc):
        s=self.sources[idsrc]
        if type(s)==types.StringType:
            return s
        return self.originalpattern[idsrc]

    def getSidFromStanza(self, src, maxSid=None, stanzaList=None):
        if stanzaList is None:
            stanzaList = self.spatterns
        srcnoarch=self.findarchpat.match(src)
        if srcnoarch:
            srcnoarch=srcnoarch.group(1)
        if maxSid is None:
            return stanzaList.get(src, stanzaList.get(srcnoarch, None))
        else:
            return min(maxSid, stanzaList.get(src, stanzaList.get(srcnoarch, maxSid)))

    def getSidFromFileList(self, file_list, maxSid=None, stanzaList=None):
        sid=maxSid
        for pfile,_ in file_list:
            if pfile.index_type == "Debian Package Index":
                cpt=pfile.site+'/'+pfile.archive+'/o='+pfile.origin+'/l='+pfile.label+'/a='+pfile.architecture
                sid=self.getSidFromStanza(cpt, maxSid=sid, stanzaList=stanzaList)
        return sid

    def minREid(self):
        if len(self.REsrcs) == 0:
            return None
        return min(self.REsrcs)

    def getSidFromRE(self, name, maxSid=None):
        for idsrc in self.REsrcs:
            if maxSid is not None and idsrc > maxSid:
                break
            if self.sources[idsrc].match(name):
                return idsrc
        return maxSid

    def addPkg(self, idsrc, pkg):
        name=pkg.name
        archname=pkg.get_fullname(True)
        if not (idsrc in self.packages):
            self.packages[idsrc]={}
        if not (name in self.packages[idsrc]):
            self.packages[idsrc][name]={ 'list': [archname], 'listpkg': [pkg] }
        else:
            self.packages[idsrc][name]['list'].append(archname)
            self.packages[idsrc][name]['listpkg'].append(pkg)
        if name == archname:
            self.packages[idsrc][name]['native']=name

    def pkgs(self, idsrc):
        return self.packages.get(idsrc, {})

    def pkgname(self, pkg):
        name=pkg.get('native', pkg['list'][0])
        nb=len(pkg['list'])
        if nb > 1:
            name=("%s(%i)" % (name, nb))
        return name

    def pkgnames(self, idsrc):
        return [ self.pkgname(pkg) for pkg in self.pkgs(idsrc).values() ]
          
        

def main():
    """The main function"""
    #try:
    #    opts, args = getopt.getopt(sys.argv[1:], "".join(shortoptions),
    #                               longoptions)
    #except getopt.GetoptError:
    #    usage()
    #    sys.exit(1)
    justlist=False
    justcount=False
    onlymanual=False
    optiontabular=False
    defsources={}
    xsources=[]
    xlimit=100
    cols=80
    environfile=False
    fix_config_file_location()
    for dirname in xdg.BaseDirectory.load_config_paths('apt-origins'):
        try:
             filename=os.path.join(dirname, 'stanzas.list')
             #print("Reading config from %s" % filename)
             f=open(filename,'r')
             environfile=True
             for line in f:
                if len(line)>1 and line[0] != '#':
                    s=line.rstrip('\n')
                    x=s.find('~')
                    if x!=-1:
                        xsources.append(s)
                        try:
                            defsources[s[0:x]].append(s)
                        except KeyError:
                            defsources[s[0:x]]=[s]
             f.close()
        except IOError:
            True
    
    justlist=args.list
    justcount=args.count
    optiontabular=args.tabular
    onlymanual=args.manual
    xlimit=args.lines
    cols=args.columns
    if args.order:
        for a in args.order:
            if (a=='none'):
                xsources=[]
            else:
                x=a.find('~')
                if x==-1 and defsources[a]:
                    xsources += defsources[a]
                else:
                    xsources.append(a)

    apt_pkg.init_config()
    apt_pkg.init_system()
    cache=None
    if loglevel < 1:
        cache=apt_pkg.Cache(None)
    else:
        cache=apt_pkg.Cache()
    depcache=apt_pkg.DepCache(cache)
    apt_pkg.init()
    srcs = Sources()
    for v in xsources:
        srcs.register(v)
    minREsrc=srcs.minREid()
    for pkg in cache.packages:
        version=pkg.current_ver
        if version != None and pkg.current_state == apt_pkg.CURSTATE_INSTALLED and (not(onlymanual) or not(depcache.is_auto_installed(pkg))):
            idsource=srcs.getSidFromFileList(version.file_list)
            if minREsrc is not None and (idsource is None or idsource > minREsrc):
                # perhaps a regexp would work (if some exist with better priority than currently)
                idsource=srcs.getSidFromRE(pkg.name, maxSid=idsource)
            if idsource is None:
                # no source found, trying to register one on the fly
                idsource = srcs.registerFromFileList(version.file_list)
            if idsource is not None:
                srcs.addPkg(idsource, pkg)
                continue
            # the package will go in one installed list
            target_ver = depcache.get_candidate_ver(pkg)
            if target_ver is not None and target_ver != version:
                if target_ver > version:
                    srcs.addPkg(Sources.PKG_AUTOUPGRADABLE, pkg)
                else:
                    srcs.addPkg(Sources.PKG_AUTODOWNGRADABLE, pkg)
                continue
            dversion = [ v for v in pkg.version_list if v.downloadable ]
            if len(dversion) == 0:
                srcs.addPkg(Sources.PKG_UNKNOWN, pkg)
            elif next(( v for v in dversion if version < v), None) is not None:
                srcs.addPkg(Sources.PKG_UPGRADABLE, pkg)
            else:
                srcs.addPkg(Sources.PKG_DOWNGRADABLE, pkg)
    if justlist:
        #print "#other and installed are always added by this program"
        print "#installed/(upgradable|downgradable|unknown) are always added by this program"
        print "#Check that aliases are meaningful enough"
        #print "#other: downloadable packages from unnamed repositories"
        print "#installed: packages installed but not downloadable"
        print "#  /upgradable: new versions are downloadable"
        print "#  /downgradable: older versions are downloadable (pkg removed from the archive?)"
        print "#  /unknown: no versions to download (installed with 'dpkg -i'?)"
        for i in range(len(srcs)):
            n=srcs.name(i)
            s=srcs.pattern(i)
            if len(srcs.pkgs(i)) == 0:
                print "# no currently matching packages for "+n
            print n+'~'+s
        sys.exit()
    srcs.registerInstalled(depcache)
    if justcount:
        for i in range(len(srcs)):
            nb=len(srcs.pkgs(i))
            if (nb > 0):
                print '%s: %d' % (srcs.name(i), nb)
        sys.exit()
    elif optiontabular:
        for i in range(len(srcs)):
            name=srcs.name(i)
            for u in sorted(srcs.pkgnames(i)):
                print name+': '+u
    else:
        prevname=None
        disp_packages=[]
        for i in range(len(srcs)):
            name=srcs.name(i)
            if len(srcs.pkgs(i))==0:
                continue
            # if two consecutive sections have the same name, we merge them
            if prevname != name:
                    display_package_list(disp_packages, cols, xlimit)
                    print ','+("-" * (cols-2))+'.'
                    print '|'+name.center(cols-2)+'|'
                    print '`'+("-" * (cols-2))+'\''
                    prevname=name
                    disp_packages=[]
            disp_packages += srcs.pkgnames(i)
        display_package_list(disp_packages, cols, xlimit)

def display_package_list(packages, cols, xlimit):
    new=''
    packages=sorted(set(packages))
    if len(packages)>xlimit:
        print 'Too many packages (%d). Use --tabular or --lines=X (x>=%d).' % (len(packages),len(packages))
    else:
        for u in sorted(packages):
            if len(new)+len(u)+1<=cols:
                if new!='':
                    new=new+' '+u
                else:
                    new=u
            else:
                print new
                new=u
        if len(new)>0:
            print new

if __name__ == '__main__':
    main() 
    
